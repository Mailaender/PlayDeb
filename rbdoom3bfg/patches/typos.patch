# fix some typos
Index: rbdoom3bfg-0.0.0+git20131116/neo/d3xp/ai/AI.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/d3xp/ai/AI.cpp	2013-12-31 00:48:50.989901490 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/d3xp/ai/AI.cpp	2013-12-31 02:01:47.137771311 +0100
@@ -5764,7 +5764,7 @@
 	// Getting the joint positions causes the joints to be updated.  The IK gets joint positions itself (which
 	// are already up to date because of getting the joints in this function) and then sets their positions, which
 	// forces the heirarchy to be updated again next time we get a joint or present the model.  If IK is enabled,
-	// or if we have a seperate head, we end up transforming the joints twice per frame.  Characters with no
+	// or if we have a separate head, we end up transforming the joints twice per frame.  Characters with no
 	// head entity and no ik will only transform their joints once.  Set g_debuganim to the current entity number
 	// in order to see how many times an entity transforms the joints per frame.
 	idActor::UpdateAnimationControllers();
Index: rbdoom3bfg-0.0.0+git20131116/neo/d3xp/gamesys/Class.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/d3xp/gamesys/Class.cpp	2013-12-31 00:48:50.993901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/d3xp/gamesys/Class.cpp	2013-12-31 02:02:02.445770855 +0100
@@ -1041,7 +1041,7 @@
 #if !CPU_EASYARGS
 
 	/*
-	on ppc architecture, floats are passed in a seperate set of registers
+	on ppc architecture, floats are passed in a separate set of registers
 	the function prototypes must have matching float declaration
 	
 	http://developer.apple.com/documentation/DeveloperTools/Conceptual/MachORuntime/2rt_powerpc_abi/chapter_9_section_5.html
Index: rbdoom3bfg-0.0.0+git20131116/neo/d3xp/physics/Physics_AF.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/d3xp/physics/Physics_AF.cpp	2013-12-31 00:48:51.005901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/d3xp/physics/Physics_AF.cpp	2013-12-31 02:01:50.745771203 +0100
@@ -3482,7 +3482,7 @@
 		return;
 	}
 	
-	// seperate friction per contact is silly but it's fast and often looks close enough
+	// separate friction per contact is silly but it's fast and often looks close enough
 	if( af_useImpulseFriction.GetBool() )
 	{
 	
@@ -7872,7 +7872,7 @@
 		
 		if( trees.Num() > 1 )
 		{
-			gameLocal.Warning( "Articulated figure has multiple seperate tree structures for entity '%s' type '%s'.",
+			gameLocal.Warning( "Articulated figure has multiple separate tree structures for entity '%s' type '%s'.",
 							   self->name.c_str(), self->GetType()->classname );
 		}
 		
Index: rbdoom3bfg-0.0.0+git20131116/neo/d3xp/script/Script_Compiler.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/d3xp/script/Script_Compiler.cpp	2013-12-31 00:48:51.009901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/d3xp/script/Script_Compiler.cpp	2013-12-31 02:01:54.565771090 +0100
@@ -1252,7 +1252,7 @@
 	{
 		EmitOpcode( op, object, VirtualFunctionConstant( func ) );
 		
-		// need arg size seperate since script object may be NULL
+		// need arg size separate since script object may be NULL
 		statement_t& statement = gameLocal.program.GetStatement( gameLocal.program.NumStatements() - 1 );
 		statement.c = SizeConstant( func->value.functionPtr->parmTotal );
 	}
Index: rbdoom3bfg-0.0.0+git20131116/neo/d3xp/script/Script_Program.h
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/d3xp/script/Script_Program.h	2013-12-31 00:48:51.009901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/d3xp/script/Script_Program.h	2013-12-31 02:01:58.317770978 +0100
@@ -476,7 +476,7 @@
 idProgram
 
 Handles compiling and storage of script data.  Multiple idProgram objects
-would represent seperate programs with no knowledge of each other.  Scripts
+would represent separate programs with no knowledge of each other.  Scripts
 meant to access shared data and functions should all be compiled by a
 single idProgram.
 
Index: rbdoom3bfg-0.0.0+git20131116/neo/framework/DeclAF.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/framework/DeclAF.cpp	2013-12-31 00:48:51.013901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/framework/DeclAF.cpp	2013-12-31 01:57:57.001778157 +0100
@@ -1025,7 +1025,7 @@
 			}
 			else
 			{
-				src.Error( "unkown model type %s", token.c_str() );
+				src.Error( "unknown model type %s", token.c_str() );
 				return false;
 			}
 		}
Index: rbdoom3bfg-0.0.0+git20131116/neo/framework/DeclManager.h
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/framework/DeclManager.h	2013-12-31 00:48:51.013901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/framework/DeclManager.h	2013-12-31 02:02:18.469770379 +0100
@@ -92,11 +92,11 @@
 	DS_PARSED
 } declState_t;
 
-const int DECL_LEXER_FLAGS	=	LEXFL_NOSTRINGCONCAT |				// multiple strings seperated by whitespaces are not concatenated
+const int DECL_LEXER_FLAGS	=	LEXFL_NOSTRINGCONCAT |				// multiple strings separated by whitespaces are not concatenated
 								LEXFL_NOSTRINGESCAPECHARS |			// no escape characters inside strings
 								LEXFL_ALLOWPATHNAMES |				// allow path seperators in names
 								LEXFL_ALLOWMULTICHARLITERALS |		// allow multi character literals
-								LEXFL_ALLOWBACKSLASHSTRINGCONCAT |	// allow multiple strings seperated by '\' to be concatenated
+								LEXFL_ALLOWBACKSLASHSTRINGCONCAT |	// allow multiple strings separated by '\' to be concatenated
 								LEXFL_NOFATALERRORS;				// just set a flag instead of fatal erroring
 
 
Index: rbdoom3bfg-0.0.0+git20131116/neo/idlib/CmdArgs.h
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/idlib/CmdArgs.h	2013-12-31 00:48:51.021901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/idlib/CmdArgs.h	2013-12-31 02:02:12.237770564 +0100
@@ -67,7 +67,7 @@
 	
 	// Takes a null terminated string and breaks the string up into arg tokens.
 	// Does not need to be /n terminated.
-	// Set keepAsStrings to true to only seperate tokens from whitespace and comments, ignoring punctuation
+	// Set keepAsStrings to true to only separate tokens from whitespace and comments, ignoring punctuation
 	void					TokenizeString( const char* text, bool keepAsStrings );
 	
 	void					AppendArg( const char* text );
Index: rbdoom3bfg-0.0.0+git20131116/neo/idlib/Lexer.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/idlib/Lexer.cpp	2013-12-31 00:48:51.021901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/idlib/Lexer.cpp	2013-12-31 02:02:09.249770653 +0100
@@ -207,7 +207,7 @@
 			return idLexer::punctuations[i].p;
 		}
 	}
-	return "unkown punctuation";
+	return "unknown punctuation";
 }
 
 /*
@@ -755,7 +755,7 @@
 			( c >= 'A' && c <= 'Z' ) ||
 			( c >= '0' && c <= '9' ) ||
 			c == '_' ||
-			// if treating all tokens as strings, don't parse '-' as a seperate token
+			// if treating all tokens as strings, don't parse '-' as a separate token
 			( ( idLexer::flags & LEXFL_ONLYSTRINGS ) && ( c == '-' ) ) ||
 			// if special path name characters are allowed
 			( ( idLexer::flags & LEXFL_ALLOWPATHNAMES ) && ( c == '/' || c == '\\' || c == ':' || c == '.' ) ) );
Index: rbdoom3bfg-0.0.0+git20131116/neo/idlib/Lexer.h
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/idlib/Lexer.h	2013-12-31 00:48:51.021901489 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/idlib/Lexer.h	2013-12-31 02:02:15.669770462 +0100
@@ -51,7 +51,7 @@
 	LEXFL_NOERRORS						= BIT( 0 ),	// don't print any errors
 	LEXFL_NOWARNINGS					= BIT( 1 ),	// don't print any warnings
 	LEXFL_NOFATALERRORS					= BIT( 2 ),	// errors aren't fatal
-	LEXFL_NOSTRINGCONCAT				= BIT( 3 ),	// multiple strings seperated by whitespaces are not concatenated
+	LEXFL_NOSTRINGCONCAT				= BIT( 3 ),	// multiple strings separated by whitespaces are not concatenated
 	LEXFL_NOSTRINGESCAPECHARS			= BIT( 4 ),	// no escape characters inside strings
 	LEXFL_NODOLLARPRECOMPILE			= BIT( 5 ),	// don't use the $ sign for precompilation
 	LEXFL_NOBASEINCLUDES				= BIT( 6 ),	// don't include files embraced with < >
@@ -60,7 +60,7 @@
 	LEXFL_ALLOWIPADDRESSES				= BIT( 9 ),	// allow ip addresses to be parsed as numbers
 	LEXFL_ALLOWFLOATEXCEPTIONS			= BIT( 10 ),	// allow float exceptions like 1.#INF or 1.#IND to be parsed
 	LEXFL_ALLOWMULTICHARLITERALS		= BIT( 11 ),	// allow multi character literals
-	LEXFL_ALLOWBACKSLASHSTRINGCONCAT	= BIT( 12 ),	// allow multiple strings seperated by '\' to be concatenated
+	LEXFL_ALLOWBACKSLASHSTRINGCONCAT	= BIT( 12 ),	// allow multiple strings separated by '\' to be concatenated
 	LEXFL_ONLYSTRINGS					= BIT( 13 )	// parse as whitespace deliminated strings (quoted strings keep quotes)
 } lexerFlags_t;
 
Index: rbdoom3bfg-0.0.0+git20131116/neo/idlib/Parser.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/idlib/Parser.cpp	2013-12-31 00:48:51.025901488 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/idlib/Parser.cpp	2013-12-31 01:57:51.601778317 +0100
@@ -3720,7 +3720,7 @@
 			return idParser::punctuations[i].p;
 		}
 	}
-	return "unkown punctuation";
+	return "unknown punctuation";
 }
 
 /*
Index: rbdoom3bfg-0.0.0+git20131116/neo/libs/openal-soft/include/AL/al.h
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/libs/openal-soft/include/AL/al.h	2013-12-31 00:48:51.045901488 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/libs/openal-soft/include/AL/al.h	2013-12-31 01:59:16.809775782 +0100
@@ -363,7 +363,7 @@
 /** No error. */
 #define AL_NO_ERROR                              0
 
-/** Invalid name paramater passed to AL call. */
+/** Invalid name parameter passed to AL call. */
 #define AL_INVALID_NAME                          0xA001
 
 /** Invalid enum parameter passed to AL call. */
Index: rbdoom3bfg-0.0.0+git20131116/neo/swf/SWF_SpriteInstance.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/swf/SWF_SpriteInstance.cpp	2013-12-31 00:48:51.081901487 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/swf/SWF_SpriteInstance.cpp	2013-12-31 01:59:48.545774838 +0100
@@ -677,7 +677,7 @@
 	}
 	else
 	{
-		idLib::Warning( "gotoAndPlay: expected 1 paramater" );
+		idLib::Warning( "gotoAndPlay: expected 1 parameter" );
 	}
 }
 
@@ -702,7 +702,7 @@
 	}
 	else
 	{
-		idLib::Warning( "gotoAndStop: expected 1 paramater" );
+		idLib::Warning( "gotoAndStop: expected 1 parameter" );
 	}
 }
 
@@ -1161,7 +1161,7 @@
 	}
 	else
 	{
-		idLib::Warning( "gotoAndPlay: expected 1 paramater" );
+		idLib::Warning( "gotoAndPlay: expected 1 parameter" );
 	}
 	return idSWFScriptVar();
 }
@@ -1185,7 +1185,7 @@
 	}
 	else
 	{
-		idLib::Warning( "gotoAndStop: expected 1 paramater" );
+		idLib::Warning( "gotoAndStop: expected 1 parameter" );
 	}
 	return idSWFScriptVar();
 }
Index: rbdoom3bfg-0.0.0+git20131116/neo/sys/sdl/sdl_glimp.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/sys/sdl/sdl_glimp.cpp	2013-12-31 00:48:51.085901487 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/sys/sdl/sdl_glimp.cpp	2013-12-31 02:02:05.941770751 +0100
@@ -315,7 +315,7 @@
 */
 
 #if SDL_VERSION_ATLEAST(2, 0, 0)
-// SDL1 doesn't support multiple displays, so the source is much shorter and doesn't need seperate functions
+// SDL1 doesn't support multiple displays, so the source is much shorter and doesn't need separate functions
 // makes sure the window will be full-screened on the right display and returns the SDL display index
 static int ScreenParmsHandleDisplayIndex( glimpParms_t parms )
 {
Index: rbdoom3bfg-0.0.0+git20131116/neo/sys/sys_session_local.cpp
===================================================================
--- rbdoom3bfg-0.0.0+git20131116.orig/neo/sys/sys_session_local.cpp	2013-12-31 00:48:51.093901486 +0100
+++ rbdoom3bfg-0.0.0+git20131116/neo/sys/sys_session_local.cpp	2013-12-31 01:59:24.701775548 +0100
@@ -1563,7 +1563,7 @@
 			
 			idBitMsg msg( buffer, sizeof( buffer ) );
 			
-			// Write match paramaters to the game state host, and tell him to start
+			// Write match parameters to the game state host, and tell him to start
 			GetGameLobby().parms.Write( msg );
 			
 			// Tell the game state lobby host we are ready
